name: deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  windows-binaries:

    strategy:
      matrix:
        conf:
         - msvc
         - gnu
        arch:
          - i686
          - x86_64

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.arch }}-pc-windows-${{ matrix.conf }}

    - name: Build cargo-c
      run: |
        cargo build --release

    - name: Strip gnu binaries
      if: matrix.conf == 'gnu'
      run: |
        strip "target\release\cargo-capi.exe" `
              "target\release\cargo-cbuild.exe" `
              "target\release\cargo-cinstall.exe"

    - name: Create zip
      run: |
        cd target/release
        7z a ../../cargo-c-windows-${{ matrix.conf }}-${{ matrix.arch }}.zip `
             "cargo-capi.exe" `
             "cargo-cbuild.exe" `
             "cargo-cinstall.exe"

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: cargo-c-windows-binaries
        path: cargo-c-windows-${{ matrix.conf }}-${{ matrix.arch }}.zip

  linux-binaries:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: ["i686", "x86_64", "aarch64"]

    env:
      TARGET: ${{ matrix.arch}}-unknown-linux-musl
      ARCHIVE: cargo-c-linux-${{ matrix.arch }}.tar.gz
      STRIP: ${{ matrix.arch }}-linux-gnu-strip

    steps:
    - uses: actions/checkout@v2

    - name: Install cross-compile strip
      env:
        ARCH: ${{ matrix.arch }}
      run: |
        sudo apt-get install -y binutils-${ARCH/_/-}-linux-gnu

    - name: Install cross
      run: |
        curl -sL https://github.com/cross-rs/cross/releases/download/v0.2.4/cross-x86_64-unknown-linux-musl.tar.gz \
          | tar -zxC /usr/local/bin

    - name: Install Rust stable and musl target
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ env.TARGET }}

    - name: Build cargo-c
      run: |
        cross build --target $TARGET \
            --features=cargo/vendored-openssl \
            --release \

    - name: Create zip
      run: |
        cd target/$TARGET/release
        $STRIP cargo-capi cargo-cbuild cargo-cinstall
        tar -czvf $GITHUB_WORKSPACE/$ARCHIVE \
                  cargo-capi \
                  cargo-cbuild \
                  cargo-cinstall

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: cargo-c-linux-binaries
        path: ${{ env.ARCHIVE }}

  linux-binaries-test:
    runs-on: ubuntu-latest
    needs: linux-binaries
    strategy:
      fail-fast: false
      matrix:
        arch: ["i686", "x86_64", "aarch64"]
        include:
          - arch: i686
            docker_platform: i386
          - arch: x86_64
            docker_platform: amd64
          - arch: aarch64
            docker_platform: arm64
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v2

      - uses: actions/download-artifact@v2
        with:
          name: cargo-c-linux-binaries

      - name: Cache vendored dependencies
        id: cache-vendor-dependencies
        uses: actions/cache@v3
        with:
          path: |
            config.toml
            example-project/vendor
          key: example-project-vendor-${{ hashFiles('example-project/Cargo.toml') }}-${{ matrix.arch }}
          restore-keys: |
            example-project-vendor-${{ hashFiles('example-project/Cargo.toml') }}-
            example-project-vendor-

      # Run cargo vendor, because fetching from crates.io in qemu takes too long
      - name: Run cargo vendor on example project
        if: steps.cache-vendor-dependencies.outputs.cache-hit != 'true'
        run: |
          [ -f config.toml ] && cp config.toml ~/.cargo ||:
          cargo vendor \
            --versioned-dirs \
            --manifest-path example-project/Cargo.toml \
            ${{ github.workspace }}/example-project/vendor \
          > config.toml

      - name: Start test container
        run: |
          docker run -d --rm --init \
            --name test \
            -v${{ github.workspace }}:${{ github.workspace }} \
            --workdir ${{ github.workspace }}/example-project \
            --platform linux/${{ matrix.docker_platform }} \
            rust:buster \
            tail -f /dev/null

      - name: Copy file into container
        run: |
          docker cp - test:/usr/local/cargo/bin < cargo-c-linux-${{ matrix.arch }}.tar.gz
          docker cp config.toml test:/usr/local/cargo

      - name: Install C API for example project
        run: |
          docker exec test cargo cinstall --offline --verbose --release
          docker exec test ldconfig

      - name: Test usage from C (using Makefile)
        run: |
          docker exec \
            -w ${{ github.workspace }}/example-project/usage-from-c \
            test make
          docker exec test usage-from-c/run_tests

  macos-binaries:

    runs-on: macos-latest
    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
    env:
      TARGET: ${{ matrix.arch }}-apple-darwin
      ARCHIVE: cargo-c-macos-${{ matrix.arch }}.zip

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ env.TARGET }}

    - name: Build cargo-c
      run: |
        cargo build --target $TARGET \
            --features=cargo/vendored-openssl \
            --release \

    - name: Create zip
      run: |
        cd target/$TARGET/release
        strip cargo-capi cargo-cbuild cargo-cinstall
        zip $GITHUB_WORKSPACE/$ARCHIVE \
            cargo-capi \
            cargo-cbuild \
            cargo-cinstall

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: cargo-c-macos-binaries
        path: ${{ env.ARCHIVE }}

  deploy:

    needs: [windows-binaries, linux-binaries-test, macos-binaries]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Download zip files
      uses: actions/download-artifact@v2

    - name: Create Cargo.lock
      run: |
        cargo update

    - name: Create a release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Cargo.lock
          cargo-c-linux-binaries/cargo-c-linux-x86_64.tar.gz
          cargo-c-linux-binaries/cargo-c-linux-i686.tar.gz
          cargo-c-linux-binaries/cargo-c-linux-aarch64.tar.gz
          cargo-c-macos-binaries/cargo-c-macos-x86_64.zip
          cargo-c-macos-binaries/cargo-c-macos-aarch64.zip
          cargo-c-windows-binaries/cargo-c-windows-msvc-i686.zip
          cargo-c-windows-binaries/cargo-c-windows-msvc-x86_64.zip
          cargo-c-windows-binaries/cargo-c-windows-gnu-i686.zip
          cargo-c-windows-binaries/cargo-c-windows-gnu-x86_64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
