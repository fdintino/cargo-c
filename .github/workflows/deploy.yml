name: deploy

on:
  push:

jobs:

  windows-binaries:

    strategy:
      matrix:
        conf:
         - msvc
         - gnu
        include:
         - conf: msvc
           toolchain: stable
         - conf: gnu
           toolchain: stable-x86_64-pc-windows-gnu

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.toolchain }}

    - name: Build cargo-c
      run: |
        cargo build --release

    - name: Strip gnu binaries
      if: matrix.conf == 'gnu'
      run: |
        strip "target\release\cargo-capi.exe" `
              "target\release\cargo-cbuild.exe" `
              "target\release\cargo-cinstall.exe"


    - name: Create zip
      run: |
        cd target/release
        7z a ../../cargo-c-windows-${{ matrix.conf }}.zip `
             "cargo-capi.exe" `
             "cargo-cbuild.exe" `
             "cargo-cinstall.exe"

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: cargo-c-windows-${{ matrix.conf }}-binaries
        path: cargo-c-windows-${{ matrix.conf }}.zip

  linux-binaries:
    strategy:
      matrix:
        target:
         - x86_64-unknown-linux-musl
         - powerpc64le-unknown-linux-gnu
         - aarch64-unknown-linux-gnu
        include:
         - target: x86_64-unknown-linux-musl
           sdk: musl-tools
           cc: cc
         - target: powerpc64le-unknown-linux-gnu
           sdk: crossbuild-essential-ppc64el
           cc: powerpc64le-linux-gnu-gcc
         - target: aarch64-unknown-linux-gnu
           sdk: crossbuild-essential-arm64
           cc: aarch64-linux-gnu-gcc

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install $${{ matrix.sdk }}
      run: |
        sudo apt-get install ${{ matrix.sdk }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Build cargo-c
      run: |
        mkdir .cargo
        echo -e "[target.${{ matrix.target }}]\nlinker=\"${{ matrix.cc }}\"\n" > .cargo/config
        echo -e "[profile.release]\nstrip = true" >> .cargo/config
        cargo build --target ${{ matrix.target }} --release --features vendored-openssl

    - name: Create zip
      run: |
        cd target/${{ matrix.target }}/release
        tar -czvf $GITHUB_WORKSPACE/cargo-c-${{ matrix.target }}.tar.gz \
                  cargo-capi \
                  cargo-cbuild \
                  cargo-cinstall

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: cargo-c-linux-binaries
        path: cargo-c-${{ matrix.target }}.tar.gz

  linux-binaries-test:
    runs-on: ubuntu-latest
    needs: linux-binaries
    strategy:
      fail-fast: false
      matrix:
        target:
         - x86_64-unknown-linux-musl
         - powerpc64le-unknown-linux-gnu
         - aarch64-unknown-linux-musl
        include:
          - target: x86_64-unknown-linux-musl
            platform: amd64
          - target: powerpc64le-unknown-linux-gnu
            platform: ppc64le
          - target: aarch64-unknown-linux-musl
            platform: arm64
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Set up QEMU
        if: matrix.platform != 'amd64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/${{ matrix.platform }}

      - uses: actions/download-artifact@v2
        with:
          name: cargo-c-linux-binaries

      - name: Cache vendored dependencies
        id: cache-vendor-dependencies
        uses: actions/cache@v3
        with:
          path: |
            config.toml
            example-project/vendor
          key: example-project-vendor-${{ hashFiles('example-project/Cargo.toml') }}-${{ matrix.target }}
          restore-keys: |
            example-project-vendor-${{ hashFiles('example-project/Cargo.toml') }}-
            example-project-vendor-

      # Run cargo vendor, because fetching from crates.io in qemu takes too long
      - name: Run cargo vendor on example project
        if: steps.cache-vendor-dependencies.outputs.cache-hit != 'true'
        run: |
          [ -f config.toml ] && cp config.toml ~/.cargo ||:
          cargo vendor \
            --versioned-dirs \
            --manifest-path example-project/Cargo.toml \
            ${{ github.workspace }}/example-project/vendor \
          > config.toml

      # The official rust manifest published to docker hub does not include a
      # powerpc image, so we create it locally here. See
      # https://github.com/rust-lang/docker-rust/blob/7680612/1.65.0/buster/Dockerfile
      - name: Create powerpc rust container
        if: matrix.platform == 'ppc64le'
        run: |
          docker buildx build --load \
            --platform linux/ppc64le \
            -t rust:buster \
            $(mktemp -d) -f - \
          <<'EOF'
          FROM buildpack-deps:bullseye

          ENV RUSTUP_HOME=/usr/local/rustup \
              CARGO_HOME=/usr/local/cargo \
              PATH=/usr/local/cargo/bin:$PATH \
              RUST_VERSION=1.65.0

          RUN set -eux; \
              rustArch='powerpc64le-unknown-linux-gnu'; \
              rustupSha256='774f62fd927f6c29499a6caee8f534e796161321ec35435788971629bb55af8e'; \
              url="https://static.rust-lang.org/rustup/archive/1.25.1/${rustArch}/rustup-init"; \
              wget "$url"; \
              echo "${rustupSha256} *rustup-init" | sha256sum -c -; \
              chmod +x rustup-init; \
              ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \
              rm rustup-init; \
              chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
              rustup --version; \
              cargo --version; \
              rustc --version;
          EOF

      - name: Start test container
        run: |
          docker run -d --rm --init \
            --name test \
            -v${{ github.workspace }}:${{ github.workspace }} \
            --workdir ${{ github.workspace }}/example-project \
            --platform linux/${{ matrix.platform }} \
            rust:buster \
            tail -f /dev/null

      - name: Copy file into container
        run: |
          docker cp - test:/usr/local/cargo/bin < cargo-c-${{ matrix.target }}.tar.gz
          docker cp config.toml test:/usr/local/cargo

      - name: Install C API for example project
        run: |
          docker exec test cargo cinstall --offline --verbose --release
          docker exec test ldconfig

      - name: Test usage from C (using Makefile)
        run: |
          docker exec \
            -w ${{ github.workspace }}/example-project/usage-from-c \
            test make
          docker exec test usage-from-c/run_tests

  macos-binaries:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Build cargo-c
      run: |
        cargo build --features=vendored-openssl --release

    - name: Create zip
      run: |
        cd target/release
        strip cargo-capi cargo-cbuild cargo-cinstall
        zip $GITHUB_WORKSPACE/cargo-c-macos.zip \
            cargo-capi \
            cargo-cbuild \
            cargo-cinstall

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: cargo-c-macos-binaries
        path: cargo-c-macos.zip

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [windows-binaries, linux-binaries, linux-binaries-test, macos-binaries]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Download zip files
      uses: actions/download-artifact@v2

    - name: Create Cargo.lock
      run: |
        cargo update

    - name: Create a release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Cargo.lock
          cargo-c-linux-binaries/*.tar.gz
          cargo-c-macos-binaries/cargo-c-macos.zip
          cargo-c-windows-msvc-binaries/cargo-c-windows-msvc.zip
          cargo-c-windows-gnu-binaries/cargo-c-windows-gnu.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
